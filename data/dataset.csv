file_path,test_name,Testing approach,1st Review,Final Classification,Justification,main_concepts,quantum_test,Notes
qiskit-algorithms/test/test_grover.py,test_sampler_setter,Classical,Classical,Classical,Tests Grover.set_sampler method,None,No,
qiskit-algorithms/test/test_validation.py,test_validate_in_set,Classical,Classical,Classical,"Tests function ""obj in set of objects""",None,No,
qiskit-algorithms/test/test_validation.py,test_validate_min,Classical,Classical,Classical,"Tests functions ""x <= y"" and ""x < y""",None,No,
qiskit-algorithms/test/test_validation.py,test_validate_max,Classical,Classical,Classical,"Tests functions ""x > y"" and ""x >= y""",None,No,
qiskit-algorithms/test/test_validation.py,test_validate_range,Classical,Classical,Classical,Tests functions for value in range,None,No,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_random_parameters,Classical,Classical with Quantum Collateral,Classical,"Given a target circuit, the classes synthesize another circuit, adding _pre_process and _post_process. The test runs the resulting circuit and compares with a classical solution","Quantum Circuit, RealAmplitudes, PauliOp, SparsePauliOp, Estimator, FiniteDiffEstimatorGradient",No,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_options,Classical,Classical,Classical,Tests BaseEstimatorGradient.set_options method,"Quantum Circuit, Estimator, Quantum Gradient",No,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_validation,Classical,Classical,Classical,Tests parameters validation,"Quantum Circuit, Parameter, QuantumCircuit",No,
qiskit-algorithms/test/gradients/test_qgt.py,test_options,Classical,Classical,Classical,Tests BaseQGT.set_options method,"Quantum Circuit, Quantum Gate, Quantum Measurement",No,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_parameters,Classical,Classical,Classical,"Tests the impact of optional parameters, but does not change the Quantum Circuit itself","Quantum Circuit, Parameter, QuantumCircuit, Measurement",No,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_multi_arguments,Classical,Classical,Classical,"Tests the impact of optional parameters, but does not change the Quantum Circuit itself","Quantum Circuit, Parameter, QuantumCircuit, Measurement",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_adam,Classical,Classical,Classical,Optimizer.minimize ,ADAM optimizer,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_cg,Classical,Classical,Classical,Optimizer.minimize ,CG optimizer,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_gradient_descent,Classical,Classical,Classical,Optimizer.minimize ,Gradient Descent Optimization,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_cobyla,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_l_bfgs_b,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_p_bfgs,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_nelder_mead,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_powell,Classical,Classical,Classical,Optimizer.minimize ,POWELL optimizer,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_slsqp,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_spsa,Classical,Classical,Classical,Optimizer.minimize ,SPSA optimizer,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_tnc,Classical,Classical,Classical,Optimizer.minimize ,"Optimizer, TNC",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_gsls,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_scipy_optimizer,Classical,Classical,Classical,Optimizer.minimize ,"SciPyOptimizer, BFGS",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_scipy_optimizer_callback,Classical,Classical,Classical,Optimizer.minimize ,"SciPyOptimizer, Callback function",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_scipy_optimizer_parse_bounds,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_nlopt,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_scipy,Classical,Classical,Classical,Optimizer.minimize ,"SciPyOptimizer, Serialization",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_independent_reconstruction,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_adam,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_aqgd,Classical,Classical,Classical,Optimizer.minimize ,"AQGD, Quantum Optimization",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_bobyqa,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_imfil,Classical,Classical,Classical,Optimizer.minimize ,"IMFIL, serialization",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_gradient_descent,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_gsls,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_spsa,Classical,Classical,Classical,Optimizer.minimize ,"SPSA Optimizer, Serialization",No,
qiskit-algorithms/test/optimizers/test_optimizers.py,test_spsa_custom_iterators,Classical,Classical,Classical,Optimizer.minimize ,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_recalibrate_at_optimize,Classical,Classical,Classical,Optimizer.minimize with calibrate,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_learning_rate_perturbation_as_iterators,Classical,Classical,Classical,Optimizer.minimize with learning rate as iterators,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_learning_rate_perturbation_as_arrays,Classical,Classical,Classical,Optimizer.minimize with learning rate as arrays,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_termination_checker,Classical,Classical,Classical,Tests Optimizer.minimize with a Terminator callback,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_callback,Classical,Classical,Classical,Tests Optimizer.minimize with a callback,None,No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_estimate_stddev,Classical,Classical,Classical,Tests Optimizer.estimate_stddev with a callable as loss function,"SPSA, Objective Function",No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_point_sample,Classical,Classical,Classical,Tests Optimizer.minimize with a given perturbation function,None,No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_list,Classical,Classical with Quantum Collateral,Classical,"Tests AQGD(Optimizer) as argument for VQE.compute_minimum_eigenvalue, that runs the AnsatzI(QuantumCircuit) to evaluate energy",None,No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_raises_exception,Classical,Classical,Classical,AQGD argument validation,None,No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_max_grouped_evals_non_parallelizable,Classical,Classical,Classical,AQGD argument validation,None,No,
qiskit-algorithms/test/optimizers/test_adam.py,test_adam_max_evals,Classical,Classical,Classical,ADAM(Optimizer).minimize,None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_callback,Classical,Classical,Classical,Optimizer.minimize,"GradientDescent, Callback",No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_minimize,Classical,Classical,Classical,Optimizer.minimize with learning rate as a function ,"Gradient Descent, Learning Rate, Objective Function",No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_no_start,Classical,Classical,Classical,GradientDescent(Optimizer).step without initialization (.start()),None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_start,Classical,Classical,Classical,Tests GradientDescent.start (initialization) ,None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_ask,Classical,Classical,Classical,GradientDescent.ask,"Gradient Descent, Optimization",No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_evaluate,Classical,Classical,Classical,GradientDescent.evaluate,None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_tell,Classical,Classical,Classical,GradientDescent.tell,None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_continue_condition,Classical,Classical,Classical,GradientDescent.continue,None,No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_step,Classical,Classical,Classical,GradientDescent.step,"Gradient Descent, Optimization",No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_wrong_dimension_gradient,Classical,Classical,Classical,GradientDescent.tell argument validation,None,No,
qiskit-algorithms/test/optimizers/test_umda.py,test_get_set,Classical,Classical,Classical,UMDA(Optimizer) getters and setters,None,No,
qiskit-algorithms/test/optimizers/test_umda.py,test_settings,Classical,Classical,Classical,UMDA(Optimizer).settings setter,None,No,
qiskit-algorithms/test/optimizers/test_umda.py,test_minimize,Classical,Classical,Classical,UMDA(Optimizer).minimize,None,No,
qiskit-algorithms/test/optimizers/test_umda.py,test_callback,Classical,Classical,Classical,UMDA(Optimizer).minimize with callback,None,No,
qiskit-algorithms/test/optimizers/test_optimizers_scikitquant.py,test_bobyqa,Classical,Classical with Quantum Collateral,Classical,"Tests BOBYQA(Optimizer) as argument for VQE.compute_minimum_eigenvalue, that runs the AnsatzI(QuantumCircuit) to evaluate energy",BOBYQA optimizer,No,
qiskit-algorithms/test/optimizers/test_optimizers_scikitquant.py,test_snobfit,Classical,Classical with Quantum Collateral,Classical,"Tests SNOBFIT(Optimizer) as argument for VQE.compute_minimum_eigenvalue, that runs the AnsatzI(QuantumCircuit) to evaluate energy",None,No,
qiskit-algorithms/test/optimizers/test_optimizers_scikitquant.py,test_snobfit_missing_bounds,Classical,Classical,Classical,SNOBFIT(Optimizer).minimize argument validation,None,No,
qiskit-algorithms/test/optimizers/test_optimizers_scikitquant.py,test_imfil,Classical,Classical with Quantum Collateral,Classical,"Tests IMFIL(Optimizer) as argument for VQE.compute_minimum_eigenvalue, that runs the AnsatzI(QuantumCircuit) to evaluate energy","IMFIL, optimization",No,
qiskit-algorithms/test/optimizers/utils/test_learning_rate.py,test_learning_rate,Classical,Classical,Classical,Tests LearningRate construction with different arguments,None,No,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_cyclicity,Classical,Classical,Classical,Tests helper method,None,No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme_reuse,Classical,Classical,Classical,Tests related to state vectors calculation,None,No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_aux_operators_list,Classical,Classical,Classical,NumPyEigensolver with aux operators as list,None,No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_aux_operators_dict,Classical,Classical,Classical,NumPyEigensolver with aux operators as dict,None,No,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_gradient_supported,Classical,Classical with Quantum Collateral,Classical,"Tests a dummy GradientOptimizer as argument of PVQD.evolve, which calls evaluate_observables that runs an estimator","Quantum Circuit, Parameterized Circuit, Quantum Gates, Quantum Evolution",No,
qiskit-algorithms/test/time_evolvers/test_time_evolution_problem.py,test_init_default,Classical,Classical,Classical,Tests constructor,"Quantum Circuit, Statevector, Time Evolution Problem",No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qte.py,test_create_init_state_param_dict,Classical,Classical,Classical,Tests constructor with arguments as dict,None,No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qte.py,test_create_init_state_param_dict_errors_list,Classical,Classical,Classical,Tests constructor validation,None,No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qte.py,test_create_init_state_param_dict_errors_subset,Classical,Classical,Classical,Tests constructor validation,None,No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qte.py,test_create_init_state_param_dict_errors_value,Classical,Classical,Classical,Tests constructor validation,None,No,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/imaginary/test_imaginary_mc_lachlan_principle.py,test_gradient_setting,Classical,Classical,Classical,Tests constructor with wrong gradient setting (warning) and asserts the change to appropriated one,"Quantum Estimator, Gradient, Derivative Type",No,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/real/test_real_mc_lachlan_principle.py,test_gradient_setting,Classical,Classical,Classical,Tests constructor with wrong gradient setting (warning) and asserts the change to appropriated one,"Quantum Estimator, LinCombEstimatorGradient, DerivativeType",No,
qiskit-algorithms/test/time_evolvers/variational/solvers/ode/test_var_qte_ode_solver.py,test_run_no_backend,Classical,Classical,Classical,"Tests VarQTEOdeSolver.run, which is a numerical method","Quantum ODE Solver, ImaginaryMcLachlanPrinciple, VarQTELinearSolver, OdeFunction, VarQTEOdeSolver",No,
qiskit-algorithms/test/time_evolvers/variational/solvers/ode/test_forward_euler_solver.py,test_solve,Classical,Classical,Classical,"Tests solve_ivp function, which is a numerical method",None,No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_evolve,Classical,Classical,Classical,"Tests SciPyImaginaryEvolver.evolve, which is a numerical method","Time Evolution, Hamiltonian, Statevector",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_no_time_steps,Classical,Classical,Classical,"Tests SciPyImaginaryEvolver.evolve with 0, 1 and 5 steps; validates num_timesteps >= 0 ","Time Evolution, Hamiltonian, Statevector",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_real_evolver.py,test_no_time_steps,Classical,Classical,Classical,"Tests SciPyRealEvolver.evolve with 0, 1 and 5 steps; validates num_timesteps >= 1","Time Evolution, Hamiltonian, SparsePauliOp",No,
qiskit-algorithms/test/utils/test_validate_initial_point.py,test_with_no_initial_point_or_bounds,Classical,Classical,Classical,Tests default parameter initialization,None,No,
qiskit-algorithms/test/utils/test_validate_initial_point.py,test_with_no_initial_point,Classical,Classical,Classical,Tests default parameter initialization,None,No,
qiskit-algorithms/test/utils/test_validate_initial_point.py,test_with_mismatched_params,Classical,Classical,Classical,Tests parameter validation,None,No,
qiskit-algorithms/test/utils/test_validate_bounds.py,test_with_no_ansatz_bounds,Classical,Classical,Classical,Tests return bounds value,None,No,
qiskit-algorithms/test/utils/test_validate_bounds.py,test_with_ansatz_bounds,Classical,Classical,Classical,Tests return bounds value,None,No,
qiskit-algorithms/test/utils/test_validate_bounds.py,test_with_mismatched_num_params,Classical,Classical,Classical,Parameters validation,None,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_1param_pair_local,Classical,Classical with Quantum Collateral,Classical,Tests impact of parameter on running a given circuit,"Quantum Circuit, Fidelity Calculation",No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_4param_pairs,Classical,Classical with Quantum Collateral,Classical,Same as above,None,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_symmetry,Classical,Classical with Quantum Collateral,Classical,Tests the symmetry with parameters permutation by running a given circuit,None,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_not_set_circuits,Classical,Classical,Classical,Arguments validation,None,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_circuit_mismatch,Classical,Classical,Classical,Arguments validation,None,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_asymmetric_params,Classical,Classical with Quantum Collateral,Classical,Tests the impact of parameters by running a circuit,Quantum Circuit,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_input_format,Classical,Classical with Quantum Collateral,Classical,Tests the impact of different parameters structures by running a circuit,Quantum Circuit,No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_options,Classical,Classical with Quantum Collateral,Classical,Tests optional parameters by running a circuit,None,No,
qiskit-algorithms/test/test_grover.py,test_groverop_getter,Classical,Classical,Classical,Tests Grover contructor without running the circuit,"Quantum Circuit, Grover Operator",No,
qiskit-algorithms/test/test_grover.py,test_is_good_state,Classical,Classical,Classical,"Tests AmplificationProblem.is_good_state method with different data types: list_str, list_int, Statevector, Callable","Quantum Circuit, Statevector, AmplificationProblem",No,
qiskit-algorithms/test/test_grover.py,test_implicit_phase_oracle_is_good_state,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify without explicitly defining the good states,"PhaseOracle, Grover's Algorithm, AmplificationProblem",Yes,
qiskit-algorithms/test/test_grover.py,test_iterations_with_good_state,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with different arguments for Grover constructor,"Grover Algorithm, Statevector",Yes,
qiskit-algorithms/test/test_grover.py,test_iterations_with_good_state_sample_from_iterations,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with good states derived from samples,"Grover Algorithm, Statevector, Amplification Problem",Yes,
qiskit-algorithms/test/test_grover.py,test_fixed_iterations_without_good_state,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with fixed number of iterations and no good state defined,"Grover's Algorithm, Quantum Circuit",Yes,
qiskit-algorithms/test/test_grover.py,test_iterations_without_good_state,Classical,Classical,Classical,Argument validation without running the circuit,"Grover Algorithm, Amplification Problem, Statevector",No,
qiskit-algorithms/test/test_grover.py,test_iterator,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Grover.amplify with iterations as Callable,"Quantum Circuit, Grover's Algorithm",Yes,
qiskit-algorithms/test/test_grover.py,test_growth_rate,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Grover.amplify with fixed growth rate,"Grover Algorithm, Amplification Problem, Statevector",Yes,
qiskit-algorithms/test/test_grover.py,test_max_num_iterations,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Grover.amplify reaching the max number of iterations as a Callable for iterations,"Grover's Algorithm, Iterations",Yes,
qiskit-algorithms/test/test_grover.py,test_max_power,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Grover.amplify reaching the max number of iterations by fixed max power,"Grover Algorithm, Amplification Problem",Yes,
qiskit-algorithms/test/test_grover.py,test_run_circuit_oracle,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with oracle as a circuit,"Quantum Circuit, Grover's Algorithm",Yes,
qiskit-algorithms/test/test_grover.py,test_run_state_vector_oracle,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with oracle as a Statevector,"Quantum Circuit, Grover's Algorithm",Yes,
qiskit-algorithms/test/test_grover.py,test_run_custom_grover_operator,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with AmplificationProblem with custom GroverOperator(QuantumCircuit),"Quantum Circuit, Grover Operator",Yes,
qiskit-algorithms/test/test_grover.py,test_optimal_num_iterations,Classical,Classical,Classical,"Tests Grover.optimal_num_iterations, define by numerical method, without running the circuit","Grover's search, Quantum Circuit",No,
qiskit-algorithms/test/test_grover.py,test_construct_circuit,Classical,Classical,Classical,"Tests Grover.construct_circuit comparing with an expected, without running the circuit","Quantum Circuit, Grover Operator",No,
qiskit-algorithms/test/test_grover.py,test_circuit_result,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with focus on unpacking the results ,"Quantum Circuit, Grover's Algorithm",Yes,
qiskit-algorithms/test/test_grover.py,test_max_probability,Black-box Testing,Black-box Testing,Black-box Testing,Tests Grover.amplify with focus on GroverResult.max_probability,"Quantum Circuit, Grover's Algorithm",Yes,
qiskit-algorithms/test/test_grover.py,test_oracle_evaluation,Black-box Testing,Black-box Testing,Black-box Testing,"Tests Grover.amplify with focus on GroverResult.oracle_evaluation, which returns the logical result from the boolean expression given to the PhaseOracle","Quantum Circuit, Grover's Algorithm, Phase Oracle",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_pauli_sum_1_sampler,Black-box Testing,Black-box Testing,Black-box Testing,"Tests HamiltonianPhaseEstimation.estimates, which runs a synthesized circuit, for a SparsePauliOp X,Z","Quantum Circuit, Pauli Operator, Quantum State Preparation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_pauli_sum_2_sampler,Black-box Testing,Black-box Testing,Black-box Testing,"Tests HamiltonianPhaseEstimation.estimates, which runs a synthesized circuit, for a SparsePauliOp X,Y,Z","Pauli Sum, SparsePauliOp, State Preparation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_single_pauli_op_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests HamiltonianPhaseEstimation.estimates,"Quantum Circuit, Pauli Operator, XGate",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_H2_hamiltonian_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests HamiltonianPhaseEstimation.estimates,"Quantum Circuit, Hamiltonian, Suzuki-Trotter approximation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_matrix_evolution_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests HamiltonianPhaseEstimation.estimates,"Matrix Evolution, SparsePauliOp, MatrixExponential",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_qpe_Z_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests IterativePhaseEstimation.estimate and PhaseEstimation.estimate,"Quantum Circuit, Quantum State Preparation, Quantum Phase Estimation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_qpe_X_plus_minus_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests IterativePhaseEstimation.estimate and PhaseEstimation.estimate,"Quantum Circuit, Quantum Phase Estimation, X Gate",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_qpe_RZ_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests IterativePhaseEstimation.estimate and PhaseEstimation.estimate with different state preparations,"Quantum Circuit, Quantum Phase Estimation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_qpe_two_qubit_unitary,Black-box Testing,Black-box Testing,Black-box Testing,Tests IterativePhaseEstimation.estimate and PhaseEstimation.estimate with different 2-qubit state preparations,"Quantum Circuit, Quantum Phase Estimation",Yes,
qiskit-algorithms/test/test_phase_estimator.py,test_check_num_iterations_sampler,Classical,Classical,Classical,Validates num_iterations<=0 should raise an exception without running the circuit,"Quantum Circuit, XGate",No,
qiskit-algorithms/test/test_phase_estimator.py,test_phase_estimation_scale_from_operator,Classical,Classical,Classical,"Asserts on PhaseEstimationScale._bound property, which derives from a numerical method","Quantum Circuit, Operator, Phase Estimation",No,
qiskit-algorithms/test/test_phase_estimator.py,test_qpe_Zplus_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Runs PhaseEstimation.estimate with focus on results keys and values,"Quantum Circuit, Phase Estimation, Hadamard Gate, Z Gate, Sampler",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Runs Estimation.estimate with different child classes,"Quantum Circuit, Grover Operator",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_sampler_with_shots,Black-box Testing,Black-box Testing,Black-box Testing,Runs Estimation.estimate with different child classes and sampler shots,"Quantum Circuit, Quantum Amplitude Estimation, Grover Algorithm",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_qae_circuit,Classical,Classical,Classical,Tests the construction of the circuit and compares its matrix with a expected one,"Quantum Circuit, Amplitude Estimation, Grover Operator, Quantum Fourier Transform",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_iqae_circuits,Classical,Classical,Classical,Same as above,"Quantum Circuit, Iterative Amplitude Estimation, Grover Operator",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_mlae_circuits,Classical,Classical,Classical,Same as above,"Quantum Circuit, Grover Operator, Quantum Register, Quantum Circuit, Ry Gate, BernoulliGrover, GroverOperator",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Runs QAE.estimate with different estimation classes,"Quantum Circuit, Estimation Problem, Quantum Amplitude Estimation",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_sampler_with_shots,Black-box Testing,Black-box Testing,Black-box Testing,Runs QAE.estimate with different values for shots,"Quantum Circuit, Quantum Amplitude Estimation",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_confidence_intervals,Black-box Testing,Black-box Testing,Black-box Testing,Runs QAE.estimate and asserts the result against the compute_confidence_interval (numeric method),"Quantum Estimation, Confidence Intervals",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_iqae_confidence_intervals,Black-box Testing,Black-box Testing,Black-box Testing,Same as above,"Iterative Amplitude Estimation, Confidence Intervals",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_warns_if_good_state_set,Classical,Classical,Classical,Runs QAE.estimate with focus on warning message,"Amplitude Estimation, Quantum Circuit",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_rescaling,Classical,Classical,Classical,"Tests EstimationProblem.rescale, which appends gates to the original problem given a rescale factor, but does not run the circuit","Quantum Circuit, Quantum Statevector",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_sampler_run_without_rescaling,Black-box Testing,Black-box Testing,Black-box Testing,Tests FAE.estimate,"Quantum Circuit, Quantum Amplitude Estimation",Yes,
qiskit-algorithms/test/test_amplitude_estimators.py,test_rescaling_with_custom_grover_raises,Classical,Classical with Quantum Collateral,Classical,"Asserts on raising an exception by running the circuit, but does not assert on circuit results","Grover Operator, Amplitude Estimation",No,
qiskit-algorithms/test/test_amplitude_estimators.py,test_good_state,Black-box Testing,Black-box Testing,Black-box Testing,Tests FAE.estimate,"Quantum Circuit, Grover Operator, EstimationProblem, FasterAmplitudeEstimation",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_operators,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Estimator, Parameter, QuantumCircuit, SparsePauliOp",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_single_circuit_observable,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Estimator, Parameter, QuantumCircuit, Pauli-Z Operator",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_p,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit, Estimator, Gradient Calculation",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_u,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Gates, Estimator, SparsePauliOp",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_efficient_su2,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Estimator, EfficientSU2, SparsePauliOp",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_2qubit_gate,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Gates, Estimator",Yes,Equivalence partitioning
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_parameter_coefficient,Gray-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, RealAmplitudes, Parameter Variables, Estimator, SparsePauliOp",Yes,Check if this is really gray box
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_parameters,Gray-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameter, QuantumCircuit, SparsePauliOp",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_multi_arguments,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameter, Estimator, SparsePauliOp",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_gradient_validation,Classical,Classical,Classical,Tests arguments validation,"Quantum Circuit, Estimator, Parameter, QuantumCircuit, SparsePauliOp",No,Validation only
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_spsa_gradient,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, SPSA Estimator, Parameterized Quantum Circuit, Sparse Pauli Operator",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_complex_gradient,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit, Pauli Operator",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_operations_preserved,Gray-box Testing,Gray-box Testing,Gray-box Testing,"Tests Gradient.run, asserts on results and asserts on internal properties","Quantum Circuit, Parameterized Gates, Quantum Estimators",Yes,
qiskit-algorithms/test/gradients/test_estimator_gradient.py,test_product_rule_check,Classical,Classical with Quantum-specific concept,Classical,"Asserts on raising an exception on validation (product rule check), which does not run the circuit ","Quantum Circuit, Parameter, QuantumCircuit, Rx Gate, Ry Gate",No,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_derivative_type,Black-box Testing,Black-box Testing,Black-box Testing,Tests QGT.run and asserts on results,"Quantum Circuit, Quantum Gradient Tape, Derivative Type",Yes,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_phase_fix,Black-box Testing,Black-box Testing,Black-box Testing,Tests QGT.run and asserts on results,"Quantum Circuit, Quantum Gradient Tape, Parameterized Quantum Circuit, Quantum Gates, DerivativeType",Yes,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_coefficients,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests QGT.run and asserts on results,"Quantum Circuit, Quantum Gradient Tape",Yes,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_parameters,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests QGT.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit",Yes,
qiskit-algorithms/test/gradients/test_qgt.py,test_qgt_multi_arguments,Gray-box Testing,Black-box Testing,Black-box Testing,Tests QGT.run and asserts on results,"Quantum Circuit, Quantum Gradient Tape, Parameter Shift Rule",Yes,
qiskit-algorithms/test/gradients/test_qgt.py,test_operations_preserved,Gray-box Testing,Gray-box Testing,Gray-box Testing,"Tests QGT.run, asserts on results and on internal structure","Quantum Circuit, Parameterized Gates, Quantum Gradient Tape",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_single_circuit,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit, Quantum Measurement",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_p,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit, Quantum Measurement",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_u,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Quantum Gates, Parameterized Quantum Circuit, Quantum Measurement",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_efficient_su2,Black-box Testing,Black-box Testing,Black-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, EfficientSU2",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_2qubit_gate,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameterized Gates, Quantum Gradients",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_parameter_coefficient,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, Parameter Variables, Quantum Gradients",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_validation,Classical,Classical,Classical,"Asserts on argument validation, which occurs before running the circuit","Quantum Circuit, Parameter, Sampler, Quantum Measurement",No,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_spsa_gradient,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, SPSA Sampler, Quantum Parameters, Quantum Gradients",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_gradient_random_parameters,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests Gradient.run and asserts on results,"Quantum Circuit, RealAmplitudes, Parameter Shift Rule, Finite Difference Method",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_options,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal and results properties,"Quantum Circuit, Sampler, Quantum Gradient",Yes,
qiskit-algorithms/test/gradients/test_sampler_gradient.py,test_operations_preserved,Gray-box Testing,Gray-box Testing,Gray-box Testing,"Tests Gradient.run, asserts on results and on internal structure","Quantum Circuit, Parameterized Gates, Quantum Measurement",Yes,
qiskit-algorithms/test/gradients/test_qfi.py,test_qfi,Black-box Testing,Black-box Testing,Black-box Testing,Tests QFI.run and asserts on results,"Quantum Circuit, Quantum Fisher Information",Yes,
qiskit-algorithms/test/gradients/test_qfi.py,test_qfi_phase_fix,Black-box Testing,Black-box Testing,Black-box Testing,Tests QFI.run and asserts on results,"Quantum Circuit, Quantum Fisher Information (QFI)",Yes,
qiskit-algorithms/test/gradients/test_qfi.py,test_qfi_maxcut,Gray-box Testing,Black-box Testing,Gray-box Testing,Tests QFI.run and asserts on results,"Quantum Circuit, Parameterized Quantum Circuit, Quantum Fisher Information",Yes,
qiskit-algorithms/test/gradients/test_qfi.py,test_options,Classical,Classical with Quantum Collateral,Classical,Tests QFI.run but asserts on setters,"Quantum Circuit, Quantum Fisher Information, Quantum Gradient Tape",No,
qiskit-algorithms/test/optimizers/test_optimizer_nft.py,test_nft,Classical,Classical with Quantum Collateral,Classical,Intends to test an Optimizer (numeric) and runs VQE.compute_minimum_eigenvalue to do so,"NFT optimizer, VQE, RealAmplitudes",No,"It has a quantum element which is the VQE, but the test is classical"
qiskit-algorithms/test/optimizers/test_optimizers.py,test_qnspsa,Classical,Classical,Classical,Tests QNSPSA contructor/setter,"QNSPSA optimizer, RealAmplitudes, Sampler",No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_pauli_two_design,Classical,Classical,Classical,Tests SPSA.minimize (numeric),"Pauli Two-Design, SPSA, SparsePauliOp, Statevector, Expectation Value",No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_qnspsa_fidelity_primitives,Classical,Classical,Classical,Tests QNSPSA.get_fidelity (numeric),"PauliTwoDesign, QNSPSA, Sampler",No,
qiskit-algorithms/test/optimizers/test_spsa.py,test_qnspsa_max_evals_grouped,Classical,Classical with Quantum Collateral,Classical,"Tests Optimizer.minimize, but runs an Estimator.estimate","Quantum Circuit, QNSPSA, Pauli Operator, Estimator",No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_simple,Classical,Classical with Quantum Collateral,Classical,Tests AQGD(Optimizer) as argument for VQE.compute_minimum_eigenvalue,"VQE, AQGD optimizer, RealAmplitudes, gradient",No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_int_values,Classical,Classical with Quantum Collateral,Classical,Tests AQGD(Optimizer) as argument for VQE.compute_minimum_eigenvalue,"VQE, RealAmplitudes, AQGD",No,
qiskit-algorithms/test/optimizers/test_optimizer_aqgd.py,test_max_grouped_evals_parallelizable,Classical,Classical with Quantum Collateral,Classical,Tests AQGD(Optimizer) as argument for VQE.compute_minimum_eigenvalue,"VQE, RealAmplitudes, AQGD",No,
qiskit-algorithms/test/optimizers/test_gradient_descent.py,test_pauli_two_design,Classical,Classical,Classical,Tests Optimizer.minimize,"Quantum Circuit, Pauli Operator, Gradient Descent",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_exact_sampler,Black-box Testing,Black-box Testing,Black-box Testing,Tests VQE.compute_minimum_eigenvalue,"Quantum Circuit, VQE, SamplingVQE",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_invalid_initial_point,Classical,Classical with Quantum-specific concept,Classical,Asserts on raising an excetion given a quantum validation rule,"RealAmplitudes, SamplingVQE, SLSQP",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_ansatz_resize,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue result,"Quantum Circuit, VQE, RealAmplitudes",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_invalid_ansatz_size,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, VQE, Quantum Error",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_missing_varform_params,Classical,Classical,Classical,Argument validation without running the circuit,"Variational Form, Parameters, SamplingVQE, SLSQP",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_batch_evaluate_slsqp,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on VQE.compute_minimum_eigenvalue result,"SamplingVQE, RealAmplitudes, SLSQP optimizer",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_batch_evaluate_with_qnspsa,Gray-box Testing,Gray-box with Quantum Collateral,Gray-box Testing,"Asserts on the number of calls made to function, runs the VQE.compute_minimum_eigenvalue, but does not assert on results","Quantum Circuit, TwoLocal, Pauli",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_optimizer_scipy_callable,Classical,Classical with Quantum Collateral,Classical,Asserts on the result of a SciPyOptimizer (numerical) indirectly by running the the VQE.compute_minimum_eigenvalue,"SciPy optimizer, SamplingVQE, Pauli operator",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_optimizer_callable,Classical,Classical with Quantum Collateral,Classical,Same as above,"SamplingVQE, RealAmplitudes, Pauli, Optimizer",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_auxops,Gray-box Testing,Gray-box Testing,Gray-box Testing,"Asserts on results auxiliar properties, but not the algorithm result values ","Quantum Circuit, VQE, Pauli Operator",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_nondiag_observable_raises,Classical,Classical,Classical,Argument validation without running the circuit,"Pauli-X, SamplingVQE, RealAmplitudes, SLSQP",No,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_callback,Gray-box Testing,Gray-box Testing,Gray-box Testing,"Asserts on internal stored (partial) results by running the circuit, but does not asserts on result values","SamplingVQE, RealAmplitudes, SLSQP, Callback function",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_sampling_vqe.py,test_aggregation,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on a single result property,"SamplingVQE, RealAmplitudes, Pauli-Z, Aggregation",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_default,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on AdaptVQE.compute_minimum_eigenvalue results,"VQE, AdaptVQE, Minimum Eigenvalue, Estimator, Ansatz, Optimizer",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_with_quantum_info,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on AdaptVQE.compute_minimum_eigenvalue results,"Quantum Circuit, AdaptVQE, VQE, EvolvedOperatorAnsatz",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_converged,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on termination criteria of AdaptVQE.compute_minimum_eigenvalue,"Quantum Algorithm, AdaptVQE, VQE, Estimator, Termination Criterion",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_maximum,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on termination criteria of AdaptVQE.compute_minimum_eigenvalue,"AdaptVQE, VQE, Estimator, ansatz, optimizer, termination criterion, max iterations",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_eigenvalue_threshold,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on termination criteria of AdaptVQE.compute_minimum_eigenvalue,"Quantum Circuit, SparsePauliOp, EvolvedOperatorAnsatz, VQE, AdaptVQE, TerminationCriterion",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_vqe_solver,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal state,"VQE, AdaptVQE, MinimumEigensolver",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_gradient_calculation,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on private method that runs a circuit,"Gradient Calculation, VQE, AdaptVQE, SparsePauliOp",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_adapt_vqe.py,test_supports_aux_operators,Gray-box Testing,Black/Gray-box,Gray-box Testing,"Asserts on results values and properties, although some properties reveal internal functionalities","Auxiliary Operators, AdaptVQE, VQE",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on QAOA.compute_minimum_eigenvalue result,"QAOA, Quantum Circuit, MaxCut",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa_qc_mixer,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue result,"Quantum Circuit, QAOA, Parameterized Circuit, COBYLA optimizer",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa_qc_mixer_many_parameters,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue result,"Quantum Circuit, QAOA, Parameterized Circuit, COBYLA optimizer",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa_qc_mixer_no_parameters,Gray-box Testing,Gray-box Testing,Gray-box Testing,Broad assertion (IsNotNone) on QAOA.compute_minimum_eigenvalue result,"Quantum Circuit, QAOA",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_change_operator_size,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue result with focus on optional argument,"QAOA, Quantum Circuit",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa_initial_point,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue with focus on the initial_point constructor argument impact,"QAOA, Quantum Circuit",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_qaoa_random_initial_point,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue with focus on the initial_point constructor argument impact,"QAOA, Quantum Circuit, Nelder-Mead, Minimum Eigenvalue",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_qaoa.py,test_optimizer_scipy_callable,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on QAOA.compute_minimum_eigenvalue result.cost_function_evals with focus on SciPy minimizer,"QAOA, SciPy optimizer, Nelder-Mead method",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_using_ref_estimator,Gray-box Testing,Black/Gray-box,Gray-box Testing,"Asserts on QAOA.compute_minimum_eigenvalue result's properties, but some reveal internal structures","VQE, Estimator, RYRZ Wavefunction, Optimizer, H2 Operator",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_invalid_initial_point,Classical,Classical,Classical,Argument validation without running the circuit,"VQE, Estimator, Ansatz, SLSQP, Initial Point, Minimum Eigenvalue",No,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_ansatz_resize,Gray-box Testing,Black/Gray-box,Gray-box Testing,Intends to assert on internal structure by asserting on the result,"Quantum Circuit, VQE",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_invalid_ansatz_size,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, VQE, Quantum Error",No,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_missing_ansatz_params,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, VQE, SLSQP, AlgorithmError",No,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_max_evals_grouped,Gray-box Testing,Black/Gray-box,Gray-box Testing,Intends to assert on the internal use of the optimizer by asserting on results,"VQE, SLSQP, Estimator, RYRZ Wavefunction, H2 Operator",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_with_gradient,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on VQE.compute_minimum_eigenvalue result with focus on the gradient constructor parameter,"VQE, Gradient, ParamShiftEstimatorGradient",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_gradient_passed,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal structure without asserting on results,"Gradient, Optimizer, VQE",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_gradient_run,Gray-box Testing,Black/Gray-box,Gray-box Testing,Intends to assert on internal structure by asserting on the result,"Gradient Descent, Param Shift Estimator Gradient, VQE",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_callback,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on the internal structure without asserting on the VQE.compute_minimum_eigenvalue,"VQE, COBYLA, Estimator, Ry Wavefunction",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_reuse,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results with intent to verify internal structure,"VQE, TwoLocal, Estimator, SLSQP, Operator, SparsePauliOp",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_vqe_optimizer_reuse,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results with intent to verify internal structure,"VQE, Estimator, RYRZ Wavefunction, SLSQP, L-BFGS-B",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_default_batch_evaluation_on_spsa,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on the internal structure without asserting on the VQE.compute_minimum_eigenvalue,"VQE, Estimator, SPSA, TwoLocal, Pauli",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_batch_evaluate_with_qnspsa,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on the internal structure without asserting on the VQE.compute_minimum_eigenvalue,"Quantum Circuit, TwoLocal, Pauli",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_optimizer_scipy_callable,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results with intent to verify the optimizer was used,"SciPy optimizer, VQE, Estimator, RYRZ wavefunction",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_optimizer_callable,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results with intent to verify the optimizer was used,"VQE, Estimator, RealAmplitudes, SparsePauliOp",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_aux_operators_list,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results and on results properties that reveal internal logic,"Quantum Circuit, SparsePauliOp",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_vqe.py,test_aux_operators_dict,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQE.compute_minimum_eigenvalue results and on results properties that reveal internal logic,"Quantum Circuit, SparsePauliOp",Yes,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme,Classical,Classical,Classical,Asserts on numeric solution,"NumPyMinimumEigensolver, Eigenvalue, Aux Operators",No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme_filter,Classical,Classical,Classical,Asserts on numeric solution with focus on filter parameter,"NumPyMinimumEigensolver, Filter Criterion",No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme_filter_empty,Classical,Classical,Classical,Asserts on numeric solution with focus on filter parameter,None,No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme_1q,Classical,Classical,Classical,Asserts on numeric solution,"Quantum Circuit, SparsePauliOp, NumPyMinimumEigensolver",No,
qiskit-algorithms/test/minimum_eigensolvers/test_numpy_minimum_eigensolver.py,test_cme_aux_ops_dict,Classical,Classical,Classical,Asserts on numeric solution with focus on aux_operators parameter,"Quantum Minimum Eigensolver, Auxiliary Operators",No,
qiskit-algorithms/test/time_evolvers/test_time_evolution_result.py,test_init_state,Classical,Classical,Classical,Asserts on Statevector solution,"Quantum Circuit, Statevector, Time Evolution",No,
qiskit-algorithms/test/time_evolvers/test_time_evolution_result.py,test_init_observable,Classical,Classical,Classical,Asserts on Statevector solution,"Quantum Circuit, Time Evolution",No,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_pvqd,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on PVQD.evolve -> _get_observable_evaluator -> runs the circuit,"Quantum Circuit, Time Evolution, Pauli Operator, Estimator, Optimizer, Sampler, Fidelity Calculation",Yes,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_step,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on PVQD.step method results,"Quantum Circuit, Optimization Algorithm, Quantum State Fidelity",Yes,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_get_loss,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on PVQD.get_loss method result,"Quantum Variational Quantum Deflation (PVQD), Estimator, Sampler, ComputeUncompute, Parameter Shift",Yes,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_invalid_num_timestep,Classical,Classical,Classical,Argument validation without running the circuit,"Time Evolution, Quantum Circuit, Hamiltonian, Observable",No,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_initial_guess_and_observables,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on PVQD.evolve result properties that reveal internal logic,"Time Evolution, Quantum Hamiltonian, Quantum Observables",Yes,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_zero_parameters,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, Quantum Evolution, Quantum Optimization",No,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_initial_state_raises,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, Time Evolution Problem, Quantum State, Sampler, ComputeUncompute, PVQD, SPSA optimizer",No,
qiskit-algorithms/test/time_evolvers/test_pvqd.py,test_aux_ops_raises,Classical,Classical,Classical,Argument validation without running the circuit,"Time Evolution, Hamiltonian, Observable, PVQD, SPSA",No,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter_single_qubit,Gray-box Testing,Classical on QCircuit,Gray-box Testing,"Asserts on TrotterQRTE.evolve resulting circuit comparing it to a expected Statevector, without running the circuit","Quantum Circuit, TrotterQRTE",Yes,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter,Gray-box Testing,Classical on QCircuit,Gray-box Testing,Asserts on TrotterQRTE.evolve resulting circuit and asserts on results properties that reveal internal logic without running the circuit,"Quantum Circuit, TrotterQRTE, TimeEvolutionProblem, Estimator, Statevector",Yes,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter_two_qubits,Gray-box Testing,Classical on QCircuit,Gray-box Testing,Asserts on TrotterQRTE.evolve resulting circuit comparing it to a expected Statevector without running the circuit,"Quantum Circuit, TrotterQRTE, TimeEvolutionProblem",Yes,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_qdrift,Gray-box Testing,Classical on QCircuit,Gray-box Testing,Asserts on TrotterQRTE.evolve resulting circuit comparing it to a expected Statevector without running the circuit,"Quantum Circuit, TrotterQRTE, QDrift",Yes,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter_param_errors,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, TrotterQRTE",No,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter_aux_ops_errors,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum Circuit, TrotterQRTE",No,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_trotter_qrte_trotter_hamiltonian_errors,Classical,Classical,Classical,Argument validation without running the circuit,"TrotterQRTE, Evolution Problem",No,
qiskit-algorithms/test/time_evolvers/test_trotter_qrte.py,test_barriers,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal logic,"Quantum Circuit, TrotterQRTE, TimeEvolutionProblem, SparsePauliOp",Yes,
qiskit-algorithms/test/time_evolvers/test_time_evolution_problem.py,test_init_all,Classical,Classical,Classical,Asserts on TimeEvolutionProblem contructor,"Quantum Circuit, Time Evolution Problem",No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qte.py,test_create_init_state_param_dict_errors_type,Classical,Classical,Classical,Argument validation without running the circuit,"Quantum State Initialization, Error Handling",No,
qiskit-algorithms/test/time_evolvers/variational/test_var_qite.py,test_run_d_1_with_aux_ops,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VarQITE.evolve results from a QC and asserts on internal structure of aux_ops,"Quantum Circuit, VarQITE, Time Evolution Problem",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qite.py,test_run_d_1_t_7,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQITE.evolve results from a QC only,"VarQITE, ImaginaryMcLachlanPrinciple, RK45 ODE solver",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qite.py,test_run_d_2,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQITE.evolve results from a QC only,"ImaginaryMcLachlanPrinciple, VarQITE, RK45 ODE solver",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qite.py,test_run_d_1_time_dependent,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQITE.evolve results from a QC only,"Quantum Circuit, Time Evolution Problem, VarQITE",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qrte.py,test_time_dependent_hamiltonian,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQRTE.evolve results after running the QCircuit,"Quantum Circuit, Time Evolution, Parameterized Circuit, Statevector",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qrte.py,test_run_d_1_with_aux_ops,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VarQRTE.evolve results after running the QCircuit and properties that reveal internal logic,"Quantum Circuit, Time Evolution Problem, RealMcLachlanPrinciple",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qrte.py,test_run_d_2,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQRTE.evolve results.parameters_values,"Quantum Circuit, Variational Quantum Eigensolver, RealMcLachlan Principle",Yes,
qiskit-algorithms/test/time_evolvers/variational/test_var_qrte.py,test_run_d_1_time_dependent,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on VarQRTE.evolve result.parameters_values,"Quantum Circuit, Time Evolution Problem, Quantum Gradient Descent, Real McLachlan Principle",Yes,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/imaginary/test_imaginary_mc_lachlan_principle.py,test_calc_metric_tensor,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on ImaginaryMcLachlanPrinciple.metric_tensor result,"Quantum Circuit, Pauli Operators, Variational Quantum Algorithms",Yes,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/imaginary/test_imaginary_mc_lachlan_principle.py,test_calc_calc_evolution_gradient,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on ImaginaryMcLachlanPrinciple.evolution_gradient result,"ImaginaryMcLachlanPrinciple, Evolution Gradient, SparsePauliOp, EfficientSU2",Yes,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/real/test_real_mc_lachlan_principle.py,test_calc_calc_metric_tensor,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on RealMcLachlanPrinciple.metric_tensor result,"Quantum Circuit, Pauli Operators, Variational Quantum Algorithms",Yes,
qiskit-algorithms/test/time_evolvers/variational/variational_principles/real/test_real_mc_lachlan_principle.py,test_calc_evolution_gradient,Gray-box Testing,Black-box Testing,Gray-box Testing,Asserts on RealMcLachlanPrinciple.evolution_gradient result,"Quantum Circuit, Evolution Gradient",Yes,
qiskit-algorithms/test/time_evolvers/variational/solvers/test_varqte_linear_solver.py,test_solve_lse,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on LinearSolver.solve_lse result tuple,"Quantum Circuit, Variational Quantum Eigensolver (VQE), Imaginary Time Evolution",Yes,
qiskit-algorithms/test/time_evolvers/variational/solvers/ode/test_ode_function.py,test_var_qte_ode_function,Black-box Testing,Black-box Testing,Black-box Testing,"Asserts on OdeFunction.var_qte_ode_function, which runs a LinearSolver.solve_lse","Quantum Circuit, ImaginaryMcLachlanPrinciple, VarQTELinearSolver, OdeFunction",Yes,
qiskit-algorithms/test/time_evolvers/variational/solvers/ode/test_ode_function.py,test_var_qte_ode_function_time_param,Gray-box Testing,Black-box Testing,Gray-box Testing,"Asserts on OdeFunction.var_qte_ode_function, which runs a LinearSolver.solve_lse with focus on time parameter","Quantum Circuit, ImaginaryMcLachlanPrinciple, VarQTELinearSolver, OdeFunction",Yes,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_observables,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Quantum Circuit, Time Evolution, Pauli Operator",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_quantum_circuit_initial_state,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Quantum Circuit, Time Evolution, SparsePauliOp, Statevector",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_paulisumop_hamiltonian,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Quantum Circuit, SparsePauliOp, TimeEvolutionProblem, Statevector",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_imaginary_evolver.py,test_error_time_dependency,Classical,Classical,Classical,Argument validation,"Time Evolution, Hamiltonian, Statevector, Imaginary Time Evolver",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_real_evolver.py,test_evolve,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Time Evolution, Hamiltonian, Statevector, SciPyRealEvolver",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_real_evolver.py,test_observables,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Quantum Circuit, Time Evolution, Pauli Operators",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_real_evolver.py,test_quantum_circuit_initial_state,Classical,Classical,Classical,Asserts on Evolver.evolve numeric result,"Quantum Circuit, Time Evolution, SparsePauliOp, SciPyRealEvolver",No,
qiskit-algorithms/test/time_evolvers/classical_methods/test_scipy_real_evolver.py,test_error_time_dependency,Classical,Classical,Classical,Argument validation,"Time Evolution, Hamiltonian, Initial State, Evolver",No,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_1param_pair,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on ComputeUncompute.run result,"Quantum Circuit, Fidelity Calculation",Yes,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_local,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on ComputeUncompute.run result with focus on local constructor argument,"Quantum Circuit, Fidelity, Quantum Circuit Execution",Yes,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_no_params,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on ComputeUncompute.run result with empty parameters,"Quantum Circuit, Fidelity Measurement",Yes,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_left_param,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on ComputeUncompute.run result with focus on params,"Quantum Circuit, Fidelity Calculation",Yes,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_right_param,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on ComputeUncompute.run result with focus on params,"Quantum Circuit, Fidelity Calculation",Yes,
qiskit-algorithms/test/state_fidelities/test_compute_uncompute.py,test_input_measurements,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on ComputeUncompute.run result with focus on the internal fidelity,"Quantum Circuit, Measurement",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_basic_operator,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on VQD.compute_eigenvalues result,"VQD, Quantum Circuit, COBYLA optimizer",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_full_spectrum,Black-box Testing,Black-box Testing,Black-box Testing,Asserts on VQD.compute_eigenvalues result,"VQD, Eigenvalues, L_BFGS_B optimizer, Sparse Pauli Hamiltonian",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_beta_autoeval,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal logic (log level) by running the circuit,"VQD, Eigenvalues, L_BFGS_B optimizer",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_mismatching_num_qubits,Classical,Classical,Classical,Argument validation,"Quantum Circuit, VQD, AlgorithmError",No,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_missing_varform_params,Classical,Classical,Classical,Argument validation,"Variational Form, Quantum Circuit, VQD, AlgorithmError",No,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_callback,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal structure by running the circuit,"VQD, COBYLA, Ry Wavefunction, Callback function",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_vqd_optimizer,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts on internal logic (callbacks) by running VDQ.compute_eigenvalues,"VQD, RealAmplitudes, SLSQP, L_BFGS_B, SPSA",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_optimizer_list,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQD.compute_eigenvalues result intending to check internal logic (optimizer use),"VQD, Optimizers, RealAmplitudes",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_aux_operators_list,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQD.compute_eigenvalues result and asserts on internal logic (aux operators),"Quantum Circuit, SparsePauliOp",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_aux_operators_dict,Gray-box Testing,Black/Gray-box,Gray-box Testing,Asserts on VQD.compute_eigenvalues result and asserts on internal logic (aux operators),"Quantum Circuit, SparsePauliOp",Yes,
qiskit-algorithms/test/eigensolvers/test_vqd.py,test_aux_operator_std_dev,Gray-box Testing,Gray-box Testing,Gray-box Testing,Asserts only on internal logic,"VQD, SparsePauliOp, COBYLA, Quantum Expectation Values",Yes,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"NumPyEigensolver, Eigenvalues, Eigenstates",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce_k4,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"Eigenvalues, NumPyEigensolver",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce_k4_filtered,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"NumPyEigensolver, Eigenvalues, Filter Criterion",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce_k4_filtered_empty,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"NumPyEigensolver, Eigenvalues, Filter Criterion",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce_k1_1q,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"NumPyEigensolver, Eigenvalues",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_ce_k2_1q,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric),"NumPyEigensolver, Eigenvalues",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_aux_operators_list,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric) with focus on internal logic,"Quantum Operator, NumPyEigensolver",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_aux_operators_dict,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric) with focus on internal logic,"Quantum Operator, NumPyEigensolver",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_pauli_op,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric) with focus on internal logic,"Pauli Operator, NumPyEigensolver",No,
qiskit-algorithms/test/eigensolvers/test_numpy_eigensolver.py,test_scalar_op,Classical,Classical,Classical,Asserts on NumPyEigensolver.compute_eigensolver result (numeric) with focus on internal logic,"Quantum Operator, NumPyEigensolver, Scalar Operator",No,